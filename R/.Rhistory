if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("AnnotationDbi", force = TRUE)
BiocManager::install("org.Hs.eg.db", force = TRUE)
# Specifica il percorso della cartella
cartella <- "../R/"
# Ottieni tutti i file .R nella cartella
file_scripts <- list.files(cartella, pattern = "\\.R$", full.names = TRUE)
# Ottieni tutti i file .R nella cartella
file_scripts <- list.files(cartella, pattern = "\\.R$", full.names = TRUE)
# Esegui il source per ciascun file
for (file in file_scripts) {
source(file)
}
library(dplyr)
library(tydiverse)
library(tidyverse)
df_pho <- read_tsv("../../AML_phosphoproteomics.tsv")
sw_len = 7
pep_col_name = NULL,
pep_col_name = NULL
impute_method = "norm"
zscore = TRUE
zmethod = "column"
metric = "median"
output_dir="../../")
output_dir="../../"
df_pho <- read_tsv("../../AML_phosphoproteomics.tsv")
View(df_pho)
df_pho_update <<- update_phospho(df = df_pho,site_col = 2,gn_idx = 1,seq_len_i = 7,peptide_col_name = pep_col_name)
View(df_pho_update)
df_pho_clean <<- remove_duplicates_phosphoproteomics(df_pho_update)
View(df_pho_clean)
if ("sequence_window" %in% colnames(df_pho_clean))
df_pho_imputed <<- impute_proteomics(df_pho_clean,start_column = 5,imputation_method = impute_method)
if ("sequence_window" %in% colnames(df_pho_clean)) {
df_pho_imputed <<- impute_proteomics(df_pho_clean,start_column = 6,imputation_method = impute_method)
} else {
df_pho_imputed <<- impute_proteomics(df_pho_clean,start_column = 5,imputation_method = impute_method)
}
df_pho_imputed <<- impute_proteomics(df_pho_clean,start_column = 5,imputation_method = impute_method)
if ("sequence_window" %in% colnames(df_pho_clean)) {
df_pho_imputed <<- impute_proteomics(df_pho_clean,start_column = 6,imputation_method = impute_method)
} else {
df_pho_imputed <<- impute_proteomics(df_pho_clean,start_column = 5,imputation_method = impute_method)
}
View(df_pho_clean)
library(mice)
install.packages(mice)
install.packages("mice")
df_pho_imputed <<- impute_proteomics(df_pho_clean,start_column = 5,imputation_method = impute_method)
View(df_pho_clean)
class(df_pho_clean)
str(df_pho_clean)
impute_proteomics <- function(df, start_column = 1, imputation_method = NULL) {
df[sapply(df, is.numeric)] <- lapply(df[sapply(df, is.numeric)], function(x) {x[is.infinite(x) | is.nan(x)] <- NA; x})
column_names <- names(df)[start_column:ncol(df)]
cleaned_column_names <- lapply(column_names, function(x) gsub("[^A-Za-z0-9]", "", as.character(x)))
names(df)[start_column:ncol(df)] <- cleaned_column_names
init = mice(df, maxit = 0)
meth = init$method
predM = init$predictorMatrix
if (!is.null(imputation_method)) {
meth[colnames(df)[start_column:ncol(df)]] <- imputation_method
}
set.seed(103)
imputed = mice(df, method = meth, predictorMatrix = predM, m = 5)
imputed <- complete(imputed)
return(imputed)
}
df_pho_imputed <<- impute_proteomics(df_pho_clean,start_column = 5,imputation_method = impute_method)
library(mice)
df_pho_imputed <<- impute_proteomics(df_pho_clean,start_column = 5,imputation_method = impute_method)
View(df_pho_imputed)
if (zscore)
if ("sequence_window" %in% colnames(df_pho_imputed)) {
df_pho_numeric <- df_pho_imputed %>%
dplyr::select(-UNIPROT, -sequence_window, -position, -aminoacid, -gene_name)
metadata_columns <- df_pho_imputed %>%
dplyr::select(UNIPROT, sequence_window, position, aminoacid, gene_name)
} else {
df_pho_numeric <- df_pho_imputed %>%
dplyr::select(-UNIPROT, -position, -aminoacid, -gene_name)
metadata_columns <- df_pho_imputed %>%
dplyr::select(UNIPROT, position, aminoacid, gene_name)
}
df_pho_matrix <- as.matrix(df_pho_numeric)
df_pho_matrix <- as.matrix(df_pho_numeric)
df_pho_zscore <<- compute_zscore(df_pho_matrix, zmethod, metric)
df_pho_zscore <<- dplyr::mutate_all(as.data.frame(df_pho_zscore), as.numeric)
View(df_pho_zscore)
View(df_pho)
View(df_pho_imputed)
View(df_pho_clean)
View(df_pho)
View(df_pho_clean)
View(df_pho_update)
View(df_pho)
View(df_pho_update)
df <- df_pho
# Step 1: Clear invalid sites
df1 <- remove_invalid_site(df, site_col)
View(df)
site_col =2
gn_idx = 1
seq_len_i=7
peptide_col_name = NULL
# Step 1: Clear invalid sites
df1 <- remove_invalid_site(df, site_col)
# Step 2: Retrieve primary gene names
df2 <- retrieve_primary_gene_name(df1, gn_idx)
View(df2)
# Identify the sequence column
sequence_col <- which(colnames(df2) == "Sequence")
# Step 3: Check if peptide_col_name is provided and exists in df
if (!is.null(peptide_col_name) && peptide_col_name %in% colnames(df)) {
peptide_col <- which(colnames(df) == peptide_col_name)
} else {
peptide_col <- NULL
}
# If no peptide column is provided, directly create amino acid position
df9 <- create_aa_position(df2, site_col)
View(df9)
# Reorder and clean the dataframe columns
df9 <- df9 %>%
dplyr::relocate(UNIPROT, aminoacid, position) %>%
dplyr::select(-Sequence, -Site)
View(df9)

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/infer_and_link_phenotypes.R
\name{infer_and_link_phenotypes}
\alias{infer_and_link_phenotypes}
\title{infer_and_link_phenotypes}
\usage{
infer_and_link_phenotypes(
  carnival_output,
  desired_phenotypes = NULL,
  pheno_distances_table = NULL,
  proteomics = NULL,
  phosphoproteomics = NULL,
  save_all_files = FALSE,
  network_params = list()
)
}
\arguments{
\item{carnival_output}{output of \code{optimize_network_with_carnival}, a list of \code{igraph_network}, \code{nodes_df}, and \code{edges_df}}

\item{desired_phenotypes}{SIGNOR phenotypes vector to infer the activity and include in the model; default:  \code{NULL}.}

\item{pheno_distances_table}{dataframe of ProxPath protein-to-phenotypes distances; default:  \code{NULL}.}

\item{proteomics}{dataframe of proteomics; default: \code{NULL}.}

\item{phosphoproteomics}{dataframe of phosphoproteomics; default: \code{NULL}.}

\item{save_all_files}{Boolean, if TRUE it will save 13 files per patient, FALSE, just 4; default \code{FALSE}.}

\item{network_params}{check \emph{initialize_net_default_params} documentation, in the \verb{$phenoscore_options} part.}
}
\value{
A list of four elements:
\itemize{
\item \code{barplot}: a ggplot2 object representing phenotype modulation inferred from model proteins;
\item \code{table_regulators}: a dataframe reporting for each inferred phenotype the regulators in the model;
\item \code{table_phenotypes}: a dataframe reporting the activity of each inferred phenotype
\item \code{sp_object_phenotypes}: the proteins-to-phenotypes network as a list of:
\itemize{
\item \code{igraph_object}: proteins-to-phenotypes network in igraph format
\item \code{nodes_df}: dataframe of the nodes in the proteins-to-phenotypes network; attributes are described in \emph{optimize_network_with_carnival} documentation
\item \code{edges_df}: dataframe of the edges in the proteins-to-phenotypes network; attributes are described in \emph{optimize_network_with_carnival} documentation
}
}
}
\description{
Wrapper to phenoscore computation algorithm in SignalingProfiler
}
\details{
\emph{Return output}
\itemize{
\item a \emph{list} containing a barplot of phenotypes activity, table of phenotypes regulators and phenotypic activity;
\item optionally, if \code{network_params$phenoscore_options$create_pheno_network == TRUE}:
\itemize{
\item add \code{sp_object_phenotypes}, a list containing the proteins to phenotypes network in the form of igraph object, nodes table, and edges table
\item creates internally an  \emph{RDS file} and a \emph{SIF file} of the proteins-phenotypes network at \code{output_dir} directory
}
}
}
\examples{
network_params <- initialize_net_default_params('./Network_output/')
network_params$carnival_options <- list(solver = 'cplex', carnival_type = 'inverse')
pheno_distance_table <- proxpath_preprocessing(proteomics, phosphoproteomics)
network_params$phenoscore_options <- list(pheno_distance_table = pheno_distance_table)

omics_list <- list(transcriptomics, proteomics, phosphoproteomics)
PKN = get_PKN(omics_list = omics_list)
naive_network = create_naive_network(PKN, sources, activities, naive_network_parameters = list(layers = 2, max_length = c(1,4)))
carnival_network = optimize_network_with_carnival(sources, activities, phosphoproteomics, network_params = network_params)
phenoscore_output = infer_and_link_phenotypes(carnival_output = carnival_network,
                                              desired_phenotypes = c('APOPTOSIS', 'PROLIFERATION'),
                                              pheno_distance_table = pheno_distance_table,
                                              proteomics = proteomics,
                                              phosphoproteomics = phosphoproteomics,
                                              network_params = network_params)

}

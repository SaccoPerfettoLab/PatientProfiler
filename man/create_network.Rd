% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_network.R
\name{create_network}
\alias{create_network}
\title{create_network}
\usage{
create_network(
  patient_id,
  sources,
  activities,
  transcriptomics = NULL,
  proteomics = NULL,
  phosphoproteomics = NULL,
  desired_phenotypes = NULL,
  pheno_distances_table = NULL,
  output_dir = "./Networks_output/",
  PKN_options = list(),
  naive_options = list(),
  carnival_options = list(),
  phenoscore_options = list(),
  format_options = list()
)
}
\arguments{
\item{patient_id}{string, patient_ID}

\item{sources}{dataframe of perturbed nodes (e.g., patient mutations), starting point of the model}

\item{activities}{dataframe of proteins inferred activity to connect to the starting point}

\item{transcriptomics}{dataframe of transcriptomics; default: \code{NULL}.}

\item{proteomics}{dataframe of proteomics; default: \code{NULL}.}

\item{phosphoproteomics}{dataframe of phosphoproteomics; default: \code{NULL}.}

\item{desired_phenotypes}{SIGNOR phenotypes vector to infer the activity and include in the model; default:  \code{NULL}.}

\item{pheno_distances_table}{dataframe of ProxPath protein-to-phenotypes distances; default:  \code{NULL}.}

\item{output_dir}{string, path to network folder; default \code{'./Networks_output/'}.}

\item{PKN_options}{check \emph{initialize_net_default_params} documentation, in the \verb{$PKN_options} part.}

\item{naive_options}{check \emph{initialize_net_default_params} documentation, in the \verb{$naive_options} part.}

\item{carnival_options}{check \emph{initialize_net_default_params} documentation, in the \verb{$carnival_options} part.}

\item{phenoscore_options}{check \emph{initialize_net_default_params} documentation, in the \verb{$phenoscore_options} part.}

\item{format_options}{check \emph{initialize_net_default_params} documentation, in the \verb{$format_options} part.}
}
\value{
No return.
}
\description{
This wrapper to SignalingProfiler network creation step sequentially:
\enumerate{
\item Selects a PKN using \code{get_PKN} function of PatientProfiler
\item Creates a naive network using \code{create_naive_network} function of PatientProfiler
\item Optimizes the naive network over CARNIVAL activity using \code{optimize_network_with_carnival} function of PatientProfiler
\item Infers the activity of phenotypes from model proteins and connect them in a proteins-to-phenotypes network using \code{infer_and_link_phenotypes} function of PatientProfiler
\item Manipulates the proteins-to-phenotypes model for visualization and functional circuits creation using \code{format_patient_networks} function of PatientProfiler
}
}
\details{
Final results for each patient will be saved as  \emph{RDS} and/or \emph{sif} files in \code{output_dir} folder, as follows:
\itemize{
\item Naive network files:
\itemize{
\item \verb{Naive_\{patient_id\}.RDS} and \verb{Naive_\{patient_id\}.sif}
}
\item Optimized network files:
\itemize{
\item \verb{Opt_\{patient_id\}.RDS} and \verb{Opt_\{patient_id\}.sif}
\item (optional, if \code{phosphoproteomics} is provided) \verb{Opt_\{patient_id\}_val.RDS} and \verb{Opt_\{patient_id\}_val.sif}, phosphoproteomics it is mapped on optimized networks edges;
}
\item Phenoscore computation:
\itemize{
\item \verb{Pheno_\{patient_id\}_object.RDS}: output list of \emph{infer_and_link_phenotypes} function.
\item (optional, if \code{phenoscore_options$create_pheno_network == TRUE}): \verb{Pheno_\{patient_id\}.RDS} and \verb{Pheno_\{patient_id\}.sif}: proteins-to-phenotypes network.
}
\item Formatting patient-specific network:
\itemize{
\item (optional, if \code{format_options$optimize_on_phenotypes == TRUE}):
\itemize{
\item \verb{Pheno_\{patient_id\}_object_opt.RDS}: output list of \emph{infer_and_link_phenotypes} function, overridden in \code{sp_object_phenotypes} with optimized proteins-to-phenotypes network on phenotypes activities.
\item \verb{Pheno_\{patient_id\}_opt_network.RDS} and \verb{Pheno_\{patient_id\}_opt_network.sif}: optimized proteins-to-phenotypes network on phenotypes activities.
}
\item (optional, if \code{format_options$circuits_params$k != -1}): \verb{Pheno_\{patient_id\}_circuit.RDS}: functional circuit in igraph format.
}
}
}
\examples{

patient_id <- 'CPT000814'

mutations_df <- readr::read_delim('./mutations.csv',delim = ',')
sources <- mutations_df[mutations_df$Patient_ID == patient_id, ]
activities <- readxl::read_xlsx(paste0('./Activity_Patient_', patient_id))

proteomics <- readxl::read_xlsx(paste0('./Prot_Patient_', patient_id))
transcriptomics <- readxl::read_xlsx(paste0('./Trans_Patient_', patient_id))
phosphoproteomics <- readxl::read_xlsx(paste0('./Phospho_Patient_', patient_id))

output_dir <- './Networks_output/'
desired_phenotypes <- c('APOPTOSIS', 'PROLIFERATION')
pheno_distances_table <- proxpath_preprocessing(proteomics = proteomics, phosphoproteomics = phosphoproteomics)

network_params <- initialize_net_default_params(output_dir)
create_network(patient_id = 'CPT000814',
              sources = sources,
              activities = activities,
               transcriptomics = transcriptomics,
               proteomics = proteomics,
               phosphoproteomics = phosphoproteomics,
               desired_phenotypes = c('APOPTOSIS', 'PROLIFERATION'),
               pheno_distances_table = pheno_distances_table,
               output_dir = output_dir,
               PKN_options = list(direct = FALSE),
               naive_options = list(layers = 3, max_length = c(2,1,3)),
               carnival_options = list(carnival_type = 'vanilla_one_shot'),
               phenoscore_options = list(),
               format_options = list(optimize_on_phenotypes = TRUE,
                                     circuits_params = list(k = -1),
                                     vis_cytoscape = TRUE))


}
